# Generated by Django 5.2.6 on 2025-09-21 09:28

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("catalog", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Cart",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "session_key",
                    models.CharField(
                        blank=True, db_index=True, max_length=64, null=True
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("converted", "Converted to Order"),
                            ("abandoned", "Abandoned"),
                        ],
                        default="active",
                        max_length=16,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="JPY",
                        max_length=3,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Currency must be a 3-letter ISO code (e.g., JPY, USD).",
                                regex="^[A-Z]{3}$",
                            )
                        ],
                    ),
                ),
                ("coupon_code", models.CharField(blank=True, max_length=40)),
                ("expires_at", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="carts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="CartItem",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("product_title", models.CharField(max_length=255)),
                ("product_slug", models.SlugField(max_length=255)),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        default=1,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "unit_price_amount",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "price_currency",
                    models.CharField(
                        max_length=3,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Currency must be a 3-letter ISO code (e.g., JPY, USD).",
                                regex="^[A-Z]{3}$",
                            )
                        ],
                    ),
                ),
                (
                    "cart",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="checkout.cart",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="cart_lines",
                        to="catalog.product",
                    ),
                ),
            ],
            options={
                "ordering": ["cart_id", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Coupon",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("code", models.CharField(db_index=True, max_length=40, unique=True)),
                (
                    "percent_off",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "amount_off",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="JPY",
                        max_length=3,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Currency must be a 3-letter ISO code (e.g., JPY, USD).",
                                regex="^[A-Z]{3}$",
                            )
                        ],
                    ),
                ),
                ("starts_at", models.DateTimeField(blank=True, null=True)),
                ("ends_at", models.DateTimeField(blank=True, null=True)),
                ("active", models.BooleanField(default=True)),
                ("max_redemptions", models.PositiveIntegerField(blank=True, null=True)),
                ("times_redeemed", models.PositiveIntegerField(default=0)),
                ("per_user_limit", models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                "ordering": ["code"],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            models.Q(
                                ("percent_off__isnull", False),
                                ("amount_off__isnull", True),
                            ),
                            models.Q(
                                ("percent_off__isnull", True),
                                ("amount_off__isnull", False),
                            ),
                            _connector="OR",
                        ),
                        name="ck_coupon_one_discount_type",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(("currency__regex", "^[A-Z]{3}$")),
                        name="ck_coupon_currency_3letter",
                    ),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="cart",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("user__isnull", False),
                    ("session_key__isnull", False),
                    _connector="OR",
                ),
                name="ck_cart_has_identity",
            ),
        ),
        migrations.AddConstraint(
            model_name="cart",
            constraint=models.UniqueConstraint(
                condition=models.Q(("status", "active"), ("user__isnull", False)),
                fields=("user", "status"),
                name="uq_cart_one_active_per_user",
            ),
        ),
        migrations.AddConstraint(
            model_name="cart",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("status", "active"), ("session_key__isnull", False)
                ),
                fields=("session_key", "status"),
                name="uq_cart_one_active_per_session",
            ),
        ),
        migrations.AddIndex(
            model_name="cartitem",
            index=models.Index(
                fields=["cart", "created_at"], name="ix_cartitem_cart_created"
            ),
        ),
        migrations.AddConstraint(
            model_name="cartitem",
            constraint=models.UniqueConstraint(
                fields=("cart", "product"), name="uq_cartitem_cart_product"
            ),
        ),
        migrations.AddConstraint(
            model_name="cartitem",
            constraint=models.CheckConstraint(
                condition=models.Q(("price_currency__regex", "^[A-Z]{3}$")),
                name="ck_cartitem_currency_3letter",
            ),
        ),
        migrations.AddConstraint(
            model_name="cartitem",
            constraint=models.CheckConstraint(
                condition=models.Q(("unit_price_amount__gte", 0)),
                name="ck_cartitem_price_nonneg",
            ),
        ),
    ]
