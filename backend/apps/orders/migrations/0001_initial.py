# Generated by Django 5.2.6 on 2025-09-21 09:28

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("catalog", "0001_initial"),
        ("checkout", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Order",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("number", models.CharField(db_index=True, max_length=26, unique=True)),
                ("email", models.EmailField(blank=True, max_length=254)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("draft", "Draft"),
                            ("pending_payment", "Pending payment"),
                            ("paid", "Paid"),
                            ("partially_refunded", "Partially refunded"),
                            ("refunded", "Refunded"),
                            ("canceled", "Canceled"),
                        ],
                        default="draft",
                        max_length=24,
                    ),
                ),
                (
                    "fulfillment_status",
                    models.CharField(
                        choices=[
                            ("unfulfilled", "Unfulfilled"),
                            ("partial", "Partially fulfilled"),
                            ("fulfilled", "Fulfilled"),
                            ("returned", "Returned"),
                        ],
                        default="unfulfilled",
                        max_length=16,
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        default="JPY",
                        max_length=3,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Currency must be a 3-letter ISO code (e.g., JPY, USD).",
                                regex="^[A-Z]{3}$",
                            )
                        ],
                    ),
                ),
                ("shipping_address", models.JSONField(default=dict)),
                ("billing_address", models.JSONField(default=dict)),
                (
                    "subtotal_amount",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "discount_amount",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "shipping_amount",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "tax_amount",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "total_amount",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("coupon_code", models.CharField(blank=True, max_length=40)),
                ("placed_at", models.DateTimeField(blank=True, null=True)),
                ("paid_at", models.DateTimeField(blank=True, null=True)),
                ("canceled_at", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="orders",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="OrderCoupon",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "discounted_amount",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(1)]
                    ),
                ),
                (
                    "coupon",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="applied_orders",
                        to="checkout.coupon",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="order_coupons",
                        to="orders.order",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrderItem",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("product_title", models.CharField(max_length=255)),
                ("product_slug", models.SlugField(max_length=255)),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        default=1,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "unit_price_amount",
                    models.IntegerField(
                        validators=[django.core.validators.MinValueValidator(0)]
                    ),
                ),
                (
                    "price_currency",
                    models.CharField(
                        max_length=3,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Currency must be a 3-letter ISO code (e.g., JPY, USD).",
                                regex="^[A-Z]{3}$",
                            )
                        ],
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="orders.order",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="order_lines",
                        to="catalog.product",
                    ),
                ),
            ],
            options={
                "ordering": ["order_id", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Shipment",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("carrier", models.CharField(blank=True, max_length=60)),
                ("service", models.CharField(blank=True, max_length=60)),
                ("tracking_number", models.CharField(blank=True, max_length=80)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("shipped", "Shipped"),
                            ("delivered", "Delivered"),
                            ("returned", "Returned"),
                            ("canceled", "Canceled"),
                        ],
                        default="pending",
                        max_length=16,
                    ),
                ),
                ("shipped_at", models.DateTimeField(blank=True, null=True)),
                ("delivered_at", models.DateTimeField(blank=True, null=True)),
                ("address_snapshot", models.JSONField(default=dict)),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="shipments",
                        to="orders.order",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(fields=["created_at"], name="ix_order_created"),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(
                fields=["user", "created_at"], name="ix_order_user_created"
            ),
        ),
        migrations.AddIndex(
            model_name="order",
            index=models.Index(fields=["status"], name="ix_order_status"),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("subtotal_amount__gte", 0),
                    ("discount_amount__gte", 0),
                    ("shipping_amount__gte", 0),
                    ("tax_amount__gte", 0),
                    ("total_amount__gte", 0),
                ),
                name="ck_order_amounts_nonneg",
            ),
        ),
        migrations.AddConstraint(
            model_name="order",
            constraint=models.CheckConstraint(
                condition=models.Q(("currency__regex", "^[A-Z]{3}$")),
                name="ck_order_currency_3letter",
            ),
        ),
        migrations.AddIndex(
            model_name="ordercoupon",
            index=models.Index(fields=["order"], name="ix_ordercoupon_order"),
        ),
        migrations.AddConstraint(
            model_name="ordercoupon",
            constraint=models.UniqueConstraint(
                fields=("order", "coupon"), name="uq_ordercoupon_once"
            ),
        ),
        migrations.AddIndex(
            model_name="orderitem",
            index=models.Index(
                fields=["order", "created_at"], name="ix_orderitem_order_created"
            ),
        ),
        migrations.AddConstraint(
            model_name="orderitem",
            constraint=models.CheckConstraint(
                condition=models.Q(("unit_price_amount__gte", 0)),
                name="ck_orderitem_price_nonneg",
            ),
        ),
        migrations.AddConstraint(
            model_name="orderitem",
            constraint=models.CheckConstraint(
                condition=models.Q(("price_currency__regex", "^[A-Z]{3}$")),
                name="ck_orderitem_currency_3letter",
            ),
        ),
        migrations.AddIndex(
            model_name="shipment",
            index=models.Index(
                fields=["order", "created_at"], name="ix_shipment_order_created"
            ),
        ),
        migrations.AddIndex(
            model_name="shipment",
            index=models.Index(fields=["tracking_number"], name="ix_shipment_tracking"),
        ),
    ]
